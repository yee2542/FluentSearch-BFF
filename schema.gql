# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @key(fields: String!) on INTERFACE | OBJECT

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

type AppModel {
  status: Int!
}

type FileDurationMetaDTO {
  hour: Float!
  minute: Float!
  original: String!
  second: Float!
}

type FileMetaDTO {
  bitrate: Float
  codec: String
  contentType: String!
  duration: FileDurationMetaDTO
  extension: String!
  fps: Float
  height: Float!
  sha1: String
  size: Float!
  width: Float!
}

type FileModelDTO {
  _id: String!
  createAt: String!
  meta: FileMetaDTO!
  original_filename: String!
  owner: String!
  type: FileTypeEnum!
  updateAt: String!
  uri: String!
  zone: ZoneEnum!
}

enum FileTypeEnum {
  Image
  ImageThumbnail
  Video
  VideoThumbnail
}

type Mutation {
  CreateUser(UserRegisterInput: UserRegisterInput!): UserWithId!
  Login(UserLoginInputDTO: UserLoginInputDTO!): UserSessionDTO!
  Logout: String
  RefreshToken: String
  UpdateUser(UserUpdateInput: UserUpdateInput!): UserWithId!
}

type Query {
  GetFileById(id: String!): FileModelDTO!
  GetRecentFiles(limit: Int = 1000, skip: Int = 0): RecentFiles!
  GetUserBySession: UserWithId
  ServerStatus: AppModel!
  User(id: String!): UserWithId
  Users(limit: Int = 1000, skip: Int = 0): [UserWithId!]!
}

type RecentFile {
  createAt: String!
  original_filename: String!
  type: String!
  updateAt: String!
  uri: String!
  uri_thumbnail: String!
}

type RecentFiles {
  result: [RecentPreviews!]!
}

type RecentPreviews {
  date: String!
  files: [RecentFile!]
}

input UserLoginInputDTO {
  email: String!
  password: String!
}

enum UserPackageEnumSession {
  freeUser
  paidUser
}

input UserRegisterInput {
  mainEmail: String!
  name: String!
  password: String!
}

enum UserRoleEnumSession {
  admin
  staff
  user
}

type UserSessionDTO {
  _id: String!
  mainEmail: String!
  name: String!
  package: UserPackageEnumSession!
  role: UserRoleEnumSession!
  zone: UserZoneEnumSession!
}

type UserToken {
  provider: String!
  token: String!
}

input UserUpdateInput {
  id: String!
  mainEmail: String
  name: String
}

type UserWithId {
  _id: String!
  createAt: String!
  deactivate: Boolean
  email: [String!]!
  mainEmail: String!
  name: String
  oauth: UserToken!
  package: UserPackageEnumSession!
  password: String!
  role: UserRoleEnumSession!
  updateAt: String!
  zone: UserZoneEnumSession!
}

enum UserZoneEnumSession {
  TH1
  TH2
}

enum ZoneEnum {
  TH
}
